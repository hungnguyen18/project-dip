import streamlit as st
import cv2 as cv
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt


# H√†m x·ª≠ l√Ω ·∫£nh
def negative_image(image):
    return cv.bitwise_not(image)


def logarithmic_transform(image):
    c = 255 / np.log(1 + np.max(image))
    log_image = c * (np.log(image + 1))
    log_image = np.array(log_image, dtype=np.uint8)
    return log_image


def power_law_transform(image, gamma=1.0):
    image = np.array(255 * (image / 255) ** gamma, dtype="uint8")
    return image


def equalize_histogram(image):
    if len(image.shape) == 2:
        return cv.equalizeHist(image)
    else:
        ycrcb = cv.cvtColor(image, cv.COLOR_RGB2YCrCb)
        ycrcb[:, :, 0] = cv.equalizeHist(ycrcb[:, :, 0])
        return cv.cvtColor(ycrcb, cv.COLOR_YCrCb2RGB)


def gaussian_blur(image, ksize):
    return cv.GaussianBlur(image, (ksize, ksize), 0)


def edge_detection(image):
    return cv.Canny(image, 100, 200)


# ·ª®ng d·ª•ng Streamlit
# st.set_page_config(page_title="X·ª≠ l√Ω ·∫£nh s·ªë", page_icon="üì∑", layout="wide")
st.title("üì∑ X·ª≠ l√Ω ·∫£nh s·ªë")

st.sidebar.header("üìÇ T·∫£i l√™n ·∫£nh")
uploaded_file = st.sidebar.file_uploader("T·∫£i l√™n m·ªôt ·∫£nh", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # ƒê·ªçc ·∫£nh
    image = Image.open(uploaded_file)
    image = np.array(image)

    st.sidebar.header("‚öôÔ∏è T√πy ch·ªçn x·ª≠ l√Ω ·∫£nh")
    option = st.sidebar.selectbox(
        "Ch·ªçn ki·ªÉu x·ª≠ l√Ω ·∫£nh",
        (
            "L√†m √¢m ·∫£nh",
            "Logarit ·∫£nh",
            "L≈©y th·ª´a ·∫£nh",
            "C√¢n b·∫±ng Histogram",
            "L·ªçc Gaussian",
            "Ph√°t hi·ªán bi√™n c·∫°nh",
        ),
    )

    if option == "L√†m √¢m ·∫£nh":
        st.sidebar.markdown(
            "**L√†m √¢m ·∫£nh**: ƒê·ªïi t·∫•t c·∫£ c√°c ƒëi·ªÉm ·∫£nh th√†nh m√†u ƒë·ªëi l·∫≠p c·ªßa ch√∫ng."
        )
        result = negative_image(image)
    elif option == "Logarit ·∫£nh":
        st.sidebar.markdown(
            "**Logarit ·∫£nh**: √Åp d·ª•ng ph√©p bi·∫øn ƒë·ªïi logarit ƒë·ªÉ tƒÉng ƒë·ªô s√°ng c·ªßa c√°c ƒëi·ªÉm t·ªëi."
        )
        result = logarithmic_transform(image)
    elif option == "L≈©y th·ª´a ·∫£nh":
        st.sidebar.markdown(
            "**L≈©y th·ª´a ·∫£nh**: √Åp d·ª•ng ph√©p bi·∫øn ƒë·ªïi gamma ƒë·ªÉ ƒëi·ªÅu ch·ªânh ƒë·ªô s√°ng c·ªßa ·∫£nh."
        )
        gamma = st.sidebar.slider("Ch·ªçn gi√° tr·ªã gamma", 0.1, 5.0, 1.0)
        result = power_law_transform(image, gamma)
    elif option == "C√¢n b·∫±ng Histogram":
        st.sidebar.markdown(
            "**C√¢n b·∫±ng Histogram**: C√¢n b·∫±ng l·∫°i histogram c·ªßa ·∫£nh ƒë·ªÉ c·∫£i thi·ªán ƒë·ªô t∆∞∆°ng ph·∫£n."
        )
        result = equalize_histogram(image)
    elif option == "L·ªçc Gaussian":
        st.sidebar.markdown("**L·ªçc Gaussian**: √Åp d·ª•ng l·ªçc Gaussian ƒë·ªÉ l√†m m·ªù ·∫£nh.")
        ksize = st.sidebar.slider("Ch·ªçn k√≠ch th∆∞·ªõc kernel", 3, 15, 3, step=2)
        result = gaussian_blur(image, ksize)
    elif option == "Ph√°t hi·ªán bi√™n c·∫°nh":
        st.sidebar.markdown(
            "**Ph√°t hi·ªán bi√™n c·∫°nh**: S·ª≠ d·ª•ng thu·∫≠t to√°n Canny ƒë·ªÉ ph√°t hi·ªán c√°c bi√™n c·∫°nh trong ·∫£nh."
        )
        result = edge_detection(image)

    col1, col2 = st.columns(2)
    with col1:
        st.header("·∫¢nh g·ªëc")
        st.image(image, use_column_width=True)
    with col2:
        st.header("·∫¢nh sau khi x·ª≠ l√Ω")
        st.image(result, use_column_width=True)

    # Histogram visualization
    if st.sidebar.checkbox("Hi·ªÉn th·ªã Histogram"):
        st.sidebar.markdown(
            "**Hi·ªÉn th·ªã Histogram**: Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì histogram c·ªßa ·∫£nh g·ªëc v√† ·∫£nh sau khi x·ª≠ l√Ω."
        )
        fig, ax = plt.subplots()
        if len(image.shape) == 2:  # ·∫¢nh x√°m
            ax.hist(image.ravel(), bins=256, color="black", alpha=0.5, label="G·ªëc")
            ax.hist(result.ravel(), bins=256, color="red", alpha=0.5, label="X·ª≠ l√Ω")
        else:  # ·∫¢nh m√†u
            for i, color in enumerate(["r", "g", "b"]):
                ax.hist(
                    image[:, :, i].ravel(),
                    bins=256,
                    color=color,
                    alpha=0.5,
                    label=f"G·ªëc {color}",
                )
                if len(result.shape) == 2:
                    ax.hist(
                        result.ravel(),
                        bins=256,
                        color=color,
                        alpha=0.5,
                        linestyle="dashed",
                        label=f"X·ª≠ l√Ω {color}",
                    )
                else:
                    ax.hist(
                        result[:, :, i].ravel(),
                        bins=256,
                        color=color,
                        alpha=0.5,
                        linestyle="dashed",
                        label=f"X·ª≠ l√Ω {color}",
                    )
        ax.legend()
        st.pyplot(fig)
else:
    st.info("Vui l√≤ng t·∫£i l√™n m·ªôt ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu x·ª≠ l√Ω.")

# Custom CSS for better UI
st.markdown(
    """
    <style>
        .sidebar .sidebar-content {
            background-color: #f0f2f6;
        }
        .css-1aumxhk {
            background-color: #f0f2f6;
        }
        .stButton>button {
            color: white;
            background: #4CAF50;
        }
        .stFileUploader>label {
            text-align: center;
        }
    </style>
""",
    unsafe_allow_html=True,
)
